{
  "metadata": {
    "last_check": "2025-08-19T12:55:00-07:00",
    "documentation_version": "Latest as of 2025-08-19",
    "created": "2025-08-08",
    "description": "Tracks components with embedded Claude Code knowledge and their update status"
  },
  "official_sources": [
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/slash-commands",
      "type": "documentation",
      "check_queries": [
        "new or updated features and capabilities",
        "YAML frontmatter requirements",
        "tool permissions best practices",
        "command placeholders and arguments",
      ]
    },
    {
      "url": "https://docs.anthropic.com/en/docs/claude-code/sub-agents",
      "type": "documentation",
      "check_queries": [
        "new or updated features and capabilities",
        "description field best practices",
        "proactive subagent configuration",
        "model selection guidelines"
      ]
    },
    {
      "url": "https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md",
      "type": "changelog",
      "check_queries": [
        "new or updated features and capabilities",
        "recent changes to commands",
        "recent changes to agents",
        "deprecated features",
      ]
    }
  ],
  "components_with_embedded_knowledge": [
    {
      "path": "agents/command-optimizer.md",
      "type": "optimizer",
      "description": "Optimizes slash command definitions",
      "knowledge_areas": [
        "slash-command-yaml-frontmatter",
        "tool-permissions",
        "command-best-practices",
        "parallelization-patterns"
      ],
      "last_updated": "2025-08-08",
      "embedded_knowledge": {
        "required_yaml_fields": ["name", "description"],
        "forbidden_yaml_fields": ["model"],
        "tool_groupings": "logical-complete-groups"
      }
    },
    {
      "path": "agents/subagent-optimizer.md",
      "type": "optimizer",
      "description": "Optimizes subagent definitions",
      "knowledge_areas": [
        "subagent-yaml-frontmatter",
        "description-best-practices",
        "proactive-behavior",
        "model-selection",
        "semantic-colors"
      ],
      "last_updated": "2025-08-08",
      "embedded_knowledge": {
        "required_yaml_fields": ["name", "description"],
        "description_requirements": "3-4 sentences with trigger keywords",
        "model_heuristics": "haiku-sonnet-opus selection"
      }
    },
    {
      "path": "agents/claude-md-optimizer.md",
      "type": "optimizer",
      "description": "Optimizes CLAUDE.md files for AI consumption",
      "knowledge_areas": [
        "claude-md-best-practices",
        "ai-instruction-formatting",
        "documentation-standards"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "type": "analyzer",
      "description": "Analyzes development sessions for capture",
      "knowledge_areas": [
        "tool-usage-optimization",
        "performance-patterns",
        "tool-orchestration",
        "output-formatting"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "type": "analyzer",
      "description": "Analyzes commands for normalization",
      "knowledge_areas": [
        "yaml-validation",
        "tool-permissions",
        "naming-conventions",
        "best-practices-enforcement"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "type": "analyzer",
      "description": "Analyzes files for semantic commit grouping",
      "knowledge_areas": [
        "semantic-commit-conventions",
        "file-classification"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "type": "analyzer",
      "description": "Security analysis for git commits",
      "knowledge_areas": [
        "security-patterns",
        "file-size-guidelines",
        "risk-assessment"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "type": "validator",
      "description": "Validates git operations readiness",
      "knowledge_areas": [
        "git-validation",
        "repository-state-analysis",
        "push-readiness"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "type": "validator",
      "description": "Validates command definitions",
      "knowledge_areas": [
        "yaml-frontmatter-validation",
        "tool-permission-enforcement",
        "parallelization-assessment",
        "anti-pattern-detection"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "type": "analyzer",
      "description": "Analyzes conversation segments for learning",
      "knowledge_areas": [
        "tool-permissions",
        "json-output-requirements",
        "quality-standards",
        "integration-patterns"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "type": "analyzer",
      "description": "Analyzes subagent definitions for quality",
      "knowledge_areas": [
        "subagent-definition-standards",
        "claude-code-architecture",
        "quality-assessment-criteria",
        "structured-assessment-format"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "agents/documentation-auditor.md",
      "type": "auditor",
      "description": "Audits project documentation",
      "knowledge_areas": [
        "claude-md-patterns",
        "agent-specialization",
        "documentation-consistency"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "agents/implan-auditor.md",
      "type": "auditor",
      "description": "Audits implementation plans",
      "knowledge_areas": [
        "implementation-plan-structure",
        "testing-philosophy",
        "cross-agent-integration"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "agents/implan-generator.md",
      "type": "generator",
      "description": "Generates implementation plans",
      "knowledge_areas": [
        "template-structure",
        "testing-requirements",
        "project-standards"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "agents/memory-keeper.md",
      "type": "curator",
      "description": "Manages CLAUDE.md memory storage",
      "knowledge_areas": [
        "claude-md-structure",
        "contradiction-resolution",
        "memory-patterns"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "commands/commands/create.md",
      "type": "command",
      "description": "Creates new slash commands",
      "knowledge_areas": [
        "yaml-requirements",
        "tool-permissions",
        "model-selection",
        "template-generation",
        "parallelization-strategies"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "commands/commands/normalize.md",
      "type": "command",
      "description": "Normalizes command structure",
      "knowledge_areas": [
        "naming-conventions",
        "functional-domains",
        "best-practices-reference"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "commands/docs/capture-session.md",
      "type": "command",
      "description": "Captures development session",
      "knowledge_areas": [
        "parallel-execution",
        "task-tool-patterns",
        "batching-strategies"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "commands/docs/capture-strategy.md",
      "type": "command",
      "description": "Captures high-level strategies and decisions",
      "knowledge_areas": [
        "tool-permissions",
        "parallel-execution",
        "system-constraints",
        "template-variables"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "commands/git/commit-and-push.md",
      "type": "command",
      "description": "Git commit and push workflow",
      "knowledge_areas": [
        "parallel-patterns",
        "subagent-architecture",
        "performance-optimization"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "commands/implan/create.md",
      "type": "command",
      "description": "Creates implementation plans",
      "knowledge_areas": [
        "parallel-processing",
        "testing-standards",
        "template-generation"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "commands/implan/execute.md",
      "type": "command",
      "description": "Executes implementation plans",
      "knowledge_areas": [
        "tool-permissions",
        "subagent-integration",
        "parallel-patterns",
        "quality-standards",
        "workflow-integration"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "commands/maintenance/update-knowledge-base.md",
      "type": "command",
      "description": "Updates embedded Claude Code knowledge",
      "knowledge_areas": [
        "knowledge-detection-patterns",
        "best-practices",
        "component-classification"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "commands/memory/learn.md",
      "type": "command",
      "description": "Learns from conversations",
      "knowledge_areas": [
        "parallel-optimization",
        "task-tool-usage",
        "memory-integration"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "commands/subagents/review-ecosystem.md",
      "type": "command",
      "description": "Reviews subagent ecosystem comprehensively",
      "knowledge_areas": [
        "external-documentation-integration",
        "parallel-execution-framework",
        "subagent-architecture",
        "system-constraints",
        "agent-optimization-integration",
        "yaml-frontmatter-requirements"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "resources/slash_commands_best_practices_research.md",
      "type": "documentation",
      "description": "Comprehensive slash command best practices",
      "knowledge_areas": [
        "command-patterns",
        "anti-patterns",
        "performance-optimization",
        "security-practices"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "resources/subagent_invocation_research.md",
      "type": "documentation",
      "description": "Subagent invocation patterns and architecture",
      "knowledge_areas": [
        "invocation-mechanics",
        "proactive-patterns",
        "multi-agent-architecture",
        "performance-considerations"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "resources/commands_and_agents.md",
      "type": "documentation",
      "description": "Technical deep dive on commands vs agents",
      "knowledge_areas": [
        "architectural-decisions",
        "parallel-execution",
        "orchestration-strategies",
        "technical-constraints"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "resources/understanding_commands_and_subagents.md",
      "type": "documentation",
      "description": "Comprehensive guide to commands and subagents in Claude Code",
      "knowledge_areas": [
        "main-agent-vs-subagents",
        "subagent-configuration",
        "slash-command-creation",
        "tool-permissions",
        "advanced-usage-patterns",
        "modularization-strategies",
        "workflow-orchestration"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "type": "analyzer",
      "description": "Specialized worker for processing .parallel.md job files in parallel execution",
      "knowledge_areas": [
        "parallel-execution-constraints",
        "context-detection-patterns",
        "task-tool-restrictions",
        "file-extension-validation",
        "atomic-operations",
        "error-classification"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "commands/jobs/do.md",
      "type": "command",
      "description": "Process job queue files with context-aware execution and parallel processing",
      "knowledge_areas": [
        "parallel-execution-framework",
        "system-constraints",
        "todowrite-integration-patterns",
        "subagent-architecture-limits",
        "tool-orchestration",
        "context-aware-processing"
      ],
      "last_updated": "2025-08-08"
    },
    {
      "path": "commands/docs/readme-audit.md",
      "type": "command",
      "description": "Audits and optimizes repository README.md for outstanding user experience",
      "knowledge_areas": [
        "user-experience-optimization",
        "documentation-standards", 
        "progressive-disclosure-principles",
        "content-relocation-strategies"
      ],
      "last_updated": "2025-08-14",
      "embedded_knowledge": {
        "ux_principles": "30-second test, progressive disclosure",
        "structural_patterns": "core README structure with adaptations",
        "relocation_strategies": "move complex content to docs/ with references"
      }
    },
    {
      "path": "commands/jobs/auto-improve.md",
      "type": "command",
      "description": "Continuously improve projects by finding and queueing improvement tasks",
      "knowledge_areas": [
        "parallel-execution-framework",
        "improvement-categorization",
        "job-creation-patterns",
        "continuous-improvement-loops"
      ],
      "last_updated": "2025-08-14",
      "embedded_knowledge": {
        "improvement_categories": "documentation, code-quality, bugs, performance, security",
        "job_integration": "uses addjob subagent for task creation"
      }
    },
    {
      "path": "resources/ux_optimization_patterns.md",
      "type": "documentation",
      "description": "User experience optimization patterns for Claude Code development",
      "knowledge_areas": [
        "30-second-rule-principles",
        "progressive-disclosure-architecture",
        "user-journey-optimization",
        "content-relocation-strategies",
        "validation-frameworks"
      ],
      "last_updated": "2025-08-14",
      "embedded_knowledge": {
        "ux_principles": "30-second test, progressive disclosure, audience-first design",
        "content_patterns": "scannable structure, relocation decision matrix, adaptation methodology",
        "validation_methods": "multi-level validation framework, continuous improvement"
      }
    },
    {
      "path": "resources/job_workflow_patterns.md", 
      "type": "documentation",
      "description": "Advanced workflow patterns for automated project improvement using job systems",
      "knowledge_areas": [
        "job-based-improvement-architecture",
        "parallel-execution-patterns", 
        "improvement-categorization",
        "continuous-improvement-cycles",
        "automated-analysis-patterns"
      ],
      "last_updated": "2025-08-14",
      "embedded_knowledge": {
        "architecture_patterns": "temporal decoupling, batch processing, priority management",
        "scanning_framework": "five-domain classification, parallel orchestration, scanner subagents",
        "job_management": "addjob integration, self-perpetuating cycles, adaptive learning"
      }
    },
    {
      "type": "analyzer",
      "description": "Specialized scanner for analyzing specific improvement categories in project files",
      "knowledge_areas": [
        "parallel-execution-constraints",
        "improvement-categorization",
        "project-analysis-patterns",
        "quality-assessment-criteria"
      ],
      "last_updated": "2025-08-16",
      "embedded_knowledge": {
        "improvement_categories": "documentation, code-quality, bugs, performance, security",
        "project_heuristics": "size-based category selection and execution strategy"
      }
    },
    {
      "path": "agents/addjob.md",
      "type": "job-creator",
      "description": "Creates job files for deferred task execution using the addjob utility",
      "knowledge_areas": [
        "job-creation-patterns",
        "parallel-vs-sequential-job-logic",
        "addjob-command-integration",
        "deferred-execution-architecture"
      ],
      "last_updated": "2025-08-16",
      "embedded_knowledge": {
        "job_types": "sequential (.md) vs parallel (.parallel.md)",
        "addjob_command": "bash alias with --stdin, --parallel, --n flags",
        "job_orchestration": "self-contained instructions for later execution"
      }
    },
    {
      "path": "commands/vs/tint-workspace.md",
      "type": "command",
      "description": "Apply a subtle color tint to VS Code workspace for visual differentiation",
      "knowledge_areas": [
        "vs-code-integration",
        "workspace-customization",
        "color-scheme-generation",
        "theme-detection-algorithms"
      ],
      "last_updated": "2025-08-16",
      "embedded_knowledge": {
        "workspace_structure": "VS Code .code-workspace file format",
        "color_blending": "tint overlay algorithms for dark/light themes",
        "theme_detection": "automatic base theme identification"
      }
    },
    {
      "path": "commands/pdf2md.md",
      "type": "command",
      "description": "Convert PDF to high-quality Markdown using marker with automated quality checks",
      "knowledge_areas": [
        "marker-tool-integration",
        "ai-content-analysis",
        "quality-assessment-frameworks",
        "file-processing-patterns"
      ],
      "last_updated": "2025-08-16",
      "embedded_knowledge": {
        "marker_workflow": "PDF processing with quality analysis and cleanup",
        "ai_reconstruction": "intelligent content reconstruction and enhancement",
        "quality_assessment": "professional-grade output validation"
      }
    },
    {
      "path": "agents/slash-command-executor.md",
      "type": "executor",
      "description": "Expert slash command execution specialist that handles invocation of commands stored in .claude/commands or ~/.claude/commands directories",
      "knowledge_areas": [
        "slash-command-execution-patterns",
        "context-preservation-strategies", 
        "command-file-location-resolution",
        "parameter-handling"
      ],
      "last_updated": "2025-08-19",
      "embedded_knowledge": {
        "execution_method": "Direct command execution without Task tool nesting",
        "context_handling": "Comprehensive conversation context including recent messages, current working directory, accessed files, ongoing tasks",
        "command_discovery": "Search in both .claude/commands and ~/.claude/commands directories"
      }
    }
  ],
  "pending_updates": []
}
